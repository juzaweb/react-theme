import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchPost, fetchPosts } from './posterAPI';
import { RootState } from '../../store';
import { DefaultPost, Post } from '../../context/PostContext';

export interface PosterOptions {
  key: string;
  value?: any;
}

export interface PosterState {
  posts: {
    data?: Array<Post>
  };
  post?: Post;
  status: string;
  error?: string;
}

const initialState: PosterState = {
  posts: {},
  status: 'idle',
};

export const getPostBySlug = createAsyncThunk(
  'poster/fetchPost',
  async ({type, slug}: {type: string, slug: string}) => {
    const response = await fetchPost(type, slug);
    return response.data;
  }
);

export const getPosts = createAsyncThunk(
  'poster/fetchPosts',
  async ({type, options}: {type: string, options?: Array<PosterOptions>}) => {
    const response = await fetchPosts(type, options);
    return response.data;
  }
);

export const posterSlice = createSlice({
  name: 'poster',
  initialState,
  reducers: {
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder
      .addCase(getPosts.pending, (state, action) => {
        state.status = 'loading'
      })
      .addCase(getPosts.fulfilled, (state, action) => {
        state.status = 'succeeded';
        // Add any fetched posts to the array
        state.posts = action.payload;
      })
      .addCase(getPosts.rejected, (state, action) => {
        state.status = 'failed'
        state.error = action.error.message
      })
      .addCase(getPostBySlug.fulfilled, (state, action) => {
        state.status = 'succeeded';
        // Add any fetched posts to the array
        state.post = action.payload.data;
      })
  }
});

export const selectAllPosts = (state: RootState) => state.poster.posts

export const selectPost = (state: RootState) => state.poster.post

export default posterSlice.reducer;
