import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchMenu, fetchThemeConfig } from './configAPI';
import { RootState } from '../../store';

export interface ConfigOptions {
  key: string;
  value?: any;
}

export interface PostType {
  label: string;
  key: string;
  singular: string;
  supports?: Array<string>;
  description?: string;
}

export interface Permalink {
  label: string
  base: string 
  key: string
  post_type?: string
}

export interface ConfigState {
  config?: {
    general?: {
      title?: string;
      description?: string;
    },
    post_types?: Array<{[key: string]: PostType}>
    permalinks?: Array<{[key: string]: Permalink}>
  };
  status: string;
  error?: string;
}

const initialState: ConfigState = {
  status: 'idle',
};

export const getThemeConfig = createAsyncThunk(
  'config/fetchThemeConfig',
  async () => {
    const response = await fetchThemeConfig();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const getMenu = createAsyncThunk(
  'config/fetchMenu',
  async (location: string) => {
    const response = await fetchMenu(location);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const configSlice = createSlice({
  name: 'config',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder
      .addCase(getThemeConfig.pending, (state, action) => {
        state.status = 'loading'
      })
      .addCase(getThemeConfig.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.config = action.payload.data;
      })
      .addCase(getThemeConfig.rejected, (state, action) => {
        state.status = 'failed'
        state.error = action.error.message
      })
  }
});

export const selectConfig = (state: RootState) => state.config.config

export default configSlice.reducer;
