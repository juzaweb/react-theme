import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchMenu } from './menuAPI';
import { RootState } from '../../store';

export interface MenuItem {
  id: string
  label: string
  link: string
  children?: Array<MenuItem>
}

export interface Menu {
  id: string
  name: string
  items: Array<MenuItem>
}

export interface MenuState {
  menus: {[key: string]: Menu};
  status: string;
  error?: string;
}

const initialState: MenuState = {
  menus: {},
  status: 'idle',
};

export const getMenu = createAsyncThunk(
  'menu/fetchMenu',
  async (location: string) => {
    const response = await fetchMenu(location);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const menuSlice = createSlice({
  name: 'menu',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder
      .addCase(getMenu.pending, (state, action) => {
        state.status = 'loading';
      })
      .addCase(getMenu.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.menus[action.payload.data.id] = action.payload.data;
      })
      .addCase(getMenu.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      })
  }
});

export const selectMenu = (state: RootState) => state.menu.menus

export default menuSlice.reducer;
